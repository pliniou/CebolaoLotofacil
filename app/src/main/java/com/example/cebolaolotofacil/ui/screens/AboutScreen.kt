package com.example.cebolaolotofacil.ui.screens

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.VerifiedUser
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.cebolaolotofacil.ui.components.InfoDialog
import com.example.cebolaolotofacil.viewmodels.AboutViewModel
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutScreen(aboutViewModel: AboutViewModel = viewModel()) {
    val appInfo by aboutViewModel.appInfo.collectAsState()
    var showDialogContent by remember { mutableStateOf<Pair<String, String>?>(null) }

    showDialogContent?.let { (title, text) ->
        InfoDialog(
            onDismissRequest = { showDialogContent = null },
            dialogTitle = title,
            dialogText = text
        )
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        "Sobre o Cebol√£o",
                        style = MaterialTheme.typography.titleLarge
                    )
                }
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(horizontal = 16.dp)
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {

            Spacer(modifier = Modifier.height(8.dp))

            // App Info Header
            Text(
                text = "üßÖ ${appInfo.appName}",
                style = MaterialTheme.typography.titleLarge.copy(
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold
                ),
                color = MaterialTheme.colorScheme.primary,
                textAlign = TextAlign.Center
            )

            Text(
                text = "Ferramenta estat√≠stica para gera√ß√£o inteligente de jogos",
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                textAlign = TextAlign.Center,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))

            // Se√ß√µes Clic√°veis
            ClickableInfoSection(
                title = "Nossa Hist√≥ria",
                subtitle = "Conhe√ßa a Cebola Studios",
                icon = Icons.Default.Info,
                onClick = { showDialogContent = getHistoryContent() }
            )

            ClickableInfoSection(
                title = "Como Funciona",
                subtitle = "Metodologia e algoritmos",
                icon = Icons.Default.Code,
                onClick = { showDialogContent = getMethodologyContent() }
            )

            ClickableInfoSection(
                title = "Aviso Legal",
                subtitle = "Termos de uso e responsabilidades",
                icon = Icons.Default.VerifiedUser,
                onClick = { showDialogContent = getLegalContent() }
            )

            Spacer(modifier = Modifier.height(16.dp))
            HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))
            Spacer(modifier = Modifier.weight(1f))

            // Footer
            AppFooter(appInfo = appInfo)
        }
    }
}

@Composable
private fun AppFooter(appInfo: com.example.cebolaolotofacil.viewmodels.AppInfo) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.padding(bottom = 24.dp)
    ) {
        Text(
            text = "Desenvolvido com üíú por",
            style = MaterialTheme.typography.labelSmall.copy(
                fontSize = 12.sp
            ),
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Text(
            text = "üßÖ Cebola Studios",
            style = MaterialTheme.typography.titleMedium,
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(top = 4.dp)
        )
        Text(
            text = "Vers√£o ${appInfo.versionName}",
            style = MaterialTheme.typography.labelSmall,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            modifier = Modifier.padding(top = 8.dp)
        )
    }
}

@Composable
private fun ClickableInfoSection(
    title: String,
    subtitle: String? = null,
    icon: ImageVector,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline.copy(alpha = 0.2f)),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)
        )
    ) {
        Row(
            modifier = Modifier.padding(20.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.padding(end = 16.dp)
            )
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onSurface
                )
                subtitle?.let {
                    Text(
                        text = it,
                        style = MaterialTheme.typography.labelSmall.copy(
                            fontSize = 12.sp,
                            lineHeight = 16.sp
                        ),
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }
            }
        }
    }
}

// Fun√ß√µes para obter conte√∫do dos di√°logos
private fun getHistoryContent() = "Nossa Hist√≥ria" to """A Cebola Studios nasceu da fus√£o entre paix√£o por tecnologia e fasc√≠nio pelas probabilidades matem√°ticas. Nosso time acredita que por tr√°s da aparente aleatoriedade dos sorteios existe um universo de padr√µes estat√≠sticos esperando para ser explorado.

O Cebol√£o Generator √© nosso primeiro grande projeto, desenvolvido para democratizar o acesso a an√°lises estat√≠sticas avan√ßadas da Lotof√°cil. Utilizamos d√©cadas de dados hist√≥ricos e algoritmos inteligentes para oferecer uma experi√™ncia √∫nica de gera√ß√£o de jogos.

Nosso objetivo √© simples: transformar apostadores casuais em jogadores estrat√©gicos, fornecendo as melhores ferramentas dispon√≠veis no mercado. Porque acreditamos que conhecimento + estrat√©gia > sorte pura.

E sim, escolhemos a cebola como s√≠mbolo porque, assim como ela, nossos algoritmos t√™m v√°rias camadas de complexidade! üßÖ"""

private fun getMethodologyContent() = "Como Funciona" to """O Cebol√£o Generator utiliza an√°lise estat√≠stica avan√ßada baseada em mais de 3.000 sorteios hist√≥ricos da Lotof√°cil para gerar combina√ß√µes otimizadas.

üìä FILTROS ESTAT√çSTICOS:
- Soma das dezenas (padr√£o: 170-220)
- Distribui√ß√£o par/√≠mpar equilibrada
- Quantidade de n√∫meros primos
- An√°lise de posicionamento no volante
- Sequ√™ncias matem√°ticas (Fibonacci)
- M√∫ltiplos e repeti√ß√µes do sorteio anterior

üéØ PROCESSO DE GERA√á√ÉO:
1. Aplica filtros configurados pelo usu√°rio
2. Elimina combina√ß√µes estatisticamente improv√°veis
3. Prioriza padr√µes com maior frequ√™ncia hist√≥rica
4. Gera jogos √∫nicos e otimizados

‚ö†Ô∏è IMPORTANTE: Nossos algoritmos aumentam as chances estat√≠sticas, mas n√£o garantem pr√™mios. A Lotof√°cil continua sendo um jogo de probabilidades."""

private fun getLegalContent() = "Aviso Legal" to """üìã TERMOS DE USO:

Este aplicativo √© uma ferramenta de an√°lise estat√≠stica e entretenimento educativo. O Cebol√£o Generator n√£o possui qualquer v√≠nculo oficial com a Caixa Econ√¥mica Federal ou com os jogos da Lotof√°cil.

‚öñÔ∏è RESPONSABILIDADES:
- As apostas s√£o de inteira responsabilidade do usu√°rio
- N√£o garantimos pr√™mios ou resultados espec√≠ficos
- Os custos das apostas s√£o por conta do apostador
- Jogue sempre com responsabilidade e modera√ß√£o

üîí PRIVACIDADE:
- N√£o coletamos dados pessoais dos usu√°rios
- N√£o armazenamos informa√ß√µes de apostas
- Todos os c√°lculos s√£o feitos localmente no dispositivo"""